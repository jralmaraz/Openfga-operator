apiVersion: v1
kind: Secret
metadata:
  name: openfga-secrets
  namespace: openfga-system
  labels:
    app.kubernetes.io/name: openfga
    app.kubernetes.io/component: application
  annotations:
    dsv.delinea.com/inject: "true"
    dsv.delinea.com/path: "/applications/openfga"
    dsv.delinea.com/secrets: "jwt-secret,encryption-key,api-token"
type: Opaque
stringData:
  # These will be populated by DSV injector
  jwt-secret: "placeholder"
  encryption-key: "placeholder"
  api-token: "placeholder"
---
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-secrets
  namespace: openfga-system
  labels:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/component: identity
  annotations:
    dsv.delinea.com/inject: "true"
    dsv.delinea.com/path: "/identity/keycloak"
    dsv.delinea.com/secrets: "admin-password,db-password,client-secret"
type: Opaque
stringData:
  # These will be populated by DSV injector
  admin-password: "placeholder"
  db-password: "placeholder"
  client-secret: "placeholder"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openfga-with-secrets
  namespace: openfga-system
  labels:
    app.kubernetes.io/name: openfga
    app.kubernetes.io/component: application
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: openfga
      app.kubernetes.io/component: application
  template:
    metadata:
      labels:
        app.kubernetes.io/name: openfga
        app.kubernetes.io/component: application
      annotations:
        dsv.delinea.com/inject: "true"
        dsv.delinea.com/secrets: |
          - path: "/applications/openfga"
            secrets:
              - key: "jwt-secret"
                env: "OPENFGA_JWT_SECRET"
              - key: "encryption-key"
                env: "OPENFGA_ENCRYPTION_KEY"
              - key: "api-token"
                env: "OPENFGA_API_TOKEN"
            volumeMount:
              name: "openfga-secrets"
              mountPath: "/etc/openfga-secrets"
              readOnly: true
          - path: "/databases/openfga-postgres"
            secrets:
              - key: "username"
                env: "DATABASE_USERNAME"
              - key: "password"
                env: "DATABASE_PASSWORD"
    spec:
      containers:
      - name: openfga
        image: openfga/openfga:v1.4.0
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8081
          name: grpc
        env:
        - name: OPENFGA_DATASTORE_ENGINE
          value: "postgres"
        - name: OPENFGA_DATASTORE_URI
          value: "postgresql://$(DATABASE_USERNAME):$(DATABASE_PASSWORD)@postgresql-openfga:5432/openfga"
        - name: OPENFGA_HTTP_ADDR
          value: "0.0.0.0:8080"
        - name: OPENFGA_GRPC_ADDR
          value: "0.0.0.0:8081"
        - name: OPENFGA_PLAYGROUND_ENABLED
          value: "false"
        volumeMounts:
        - name: openfga-secrets
          mountPath: /etc/openfga-secrets
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: openfga-secrets
        secret:
          secretName: openfga-secrets
          defaultMode: 0400
---
apiVersion: v1
kind: Service
metadata:
  name: openfga-with-secrets
  namespace: openfga-system
  labels:
    app.kubernetes.io/name: openfga
    app.kubernetes.io/component: application
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  - port: 8081
    targetPort: grpc
    protocol: TCP
    name: grpc
  selector:
    app.kubernetes.io/name: openfga
    app.kubernetes.io/component: application