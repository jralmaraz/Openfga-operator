apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv-portworx
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    storage.kubernetes.io/type: portworx
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: portworx-sc-db
  claimRef:
    namespace: openfga-system
    name: postgres-pvc-portworx
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc-portworx
  namespace: openfga-system
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    storage.kubernetes.io/type: portworx
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: portworx-sc-db
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv-longhorn
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    storage.kubernetes.io/type: longhorn
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: longhorn-sc-db
  claimRef:
    namespace: openfga-system
    name: postgres-pvc-longhorn
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc-longhorn
  namespace: openfga-system
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    storage.kubernetes.io/type: longhorn
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: longhorn-sc-db
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-openfga
  namespace: openfga-system
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
spec:
  serviceName: postgresql-openfga
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: postgresql
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_DB
          value: openfga
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: portworx-sc-db
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-openfga
  namespace: openfga-system
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: postgresql
    protocol: TCP
    name: postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database