apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv-portworx
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: database
    storage.kubernetes.io/type: portworx
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: portworx-sc-db
  claimRef:
    namespace: openfga-system
    name: mysql-pvc-portworx
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc-portworx
  namespace: openfga-system
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: database
    storage.kubernetes.io/type: portworx
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: portworx-sc-db
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv-longhorn
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: database
    storage.kubernetes.io/type: longhorn
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: longhorn-sc-db
  claimRef:
    namespace: openfga-system
    name: mysql-pvc-longhorn
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc-longhorn
  namespace: openfga-system
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: database
    storage.kubernetes.io/type: longhorn
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: longhorn-sc-db
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-openfga
  namespace: openfga-system
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: database
spec:
  serviceName: mysql-openfga
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mysql
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
          name: mysql
        env:
        - name: MYSQL_DATABASE
          value: openfga
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-credentials
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-credentials
              key: password
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-credentials
              key: root-password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mysql
            - -h
            - localhost
            - -u
            - root
            - -p$MYSQL_ROOT_PASSWORD
            - -e
            - "SELECT 1"
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: mysql-storage
      labels:
        app.kubernetes.io/name: mysql
        app.kubernetes.io/component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: portworx-sc-db
      resources:
        requests:
          storage: 100Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-openfga
  namespace: openfga-system
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: mysql
    protocol: TCP
    name: mysql
  selector:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: database